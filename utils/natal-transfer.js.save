const fs = require('fs').promises;
const path = require('path');
const { createFileLogger } = require('./file-logger'); // Assumindo que este caminho está correto para a sua configuração
const logger = createFileLogger('natal-transfer');

// Contacto do WhatsApp ChatGPT - Este deve ser o JID real do seu contacto ChatGPT
const CHATGPT_WHATSAPP = '18002428478@s.whatsapp.net'; // Exemplo: +1 (800) 242-8478

// Ficheiro de armazenamento para os dados das viagens
const RIDES_FILE = path.join(process.cwd(), 'data', 'natal-rides.json');

// Palavras-chave para detetar mensagens de transferência para Natal
const NATAL_KEYWORDS = [
  'going to natal',
  'going to the airport',
  'leaving to natal',
  'to natal airport',
  'going to pipa',
  'coming from natal',
  'coming to pipa',
  'share a cab',
  'share a taxi',
  'share ride',
  'airport transfer',
  'natal tomorrow',
  'natal today',
  'leaving natal',
  'arriving in natal',
  'natal airport'
];

// Inicializar a estrutura de dados das viagens
let ridesData = {
  toAirport: [],   // Viagens de Pipa para Natal/Aeroporto
  fromAirport: [], // Viagens de Natal/Aeroporto para Pipa
  lastCleanup: Date.now() // Carimbo de data/hora da última operação de limpeza
};

/**
 * Carrega os dados de viagens existentes do ficheiro JSON.
 * Se o ficheiro não existir ou for inválido, cria um novo ficheiro vazio.
 */
async function loadRidesData() {
  try {
    // Garantir que o diretório para o ficheiro de viagens existe
    await fs.mkdir(path.dirname(RIDES_FILE), { recursive: true });
    
    try {
      // Tentar ler e analisar o ficheiro de dados das viagens
      const data = await fs.readFile(RIDES_FILE, 'utf8');
      ridesData = JSON.parse(data);
      logger.info('Loaded rides data from file');
    } catch (error) {
      // Se o ficheiro não for encontrado (ENOENT) ou erro de análise (SyntaxError), cria um novo ficheiro vazio
      if (error.code === 'ENOENT' || error instanceof SyntaxError) {
        await saveRidesData(); // Guardar dados vazios iniciais
        logger.info('Created new rides data file');
      } else {
        // Relançar outros erros
        throw error;
      }
    }
  } catch (error) {
    logger.error('Error loading rides data:', error);
  }
}

/**
 * Guarda os dados de viagens atuais no ficheiro JSON.
 */
async function saveRidesData() {
  try {
    await fs.writeFile(RIDES_FILE, JSON.stringify(ridesData, null, 2), 'utf8');
    logger.info('Saved rides data to file');
  } catch (error) {
    logger.error('Error saving rides data:', error);
  }
}

/**
 * Verifica se uma dada mensagem contém palavras-chave relacionadas com transferências para Natal.
 * @param {string} message - O texto da mensagem a verificar.
 * @returns {boolean} - Verdadeiro se a mensagem for uma mensagem de transferência para Natal, falso caso contrário.
 */
function isNatalTransferMessage(message) {
  const lowerMsg = message.toLowerCase();
  return NATAL_KEYWORDS.some(keyword => lowerMsg.includes(keyword.toLowerCase()));
}

/**
 * Processa uma mensagem recebida para determinar se é um pedido ou oferta de transferência para Natal.
 * Utiliza uma integração ChatGPT para analisar a intenção e os detalhes da mensagem.
 * @param {object} sock - O objeto socket Baileys para enviar mensagens.
 * @param {string} message - O conteúdo de texto da mensagem.
 * @param {string} sender - O JID (Jabber ID) do remetente da mensagem.
 * @param {string} groupId - O JID do grupo de onde a mensagem se originou.
 * @param {string} [incomingPushName] - O pushName do remetente, se disponível na mensagem original.
 * @returns {Promise<boolean>} - Verdadeiro se a mensagem foi processada como uma transferência para Natal, falso caso contrário.
 */
async function processNatalTransferMessage(sock, message, sender, groupId, incomingPushName) {
  try {
    // Lidar com o comando !natal diretamente
    if (message.toLowerCase().trim() === '!natal') {
      await handleNatalCommand(sock, groupId);
      return true;
    }
    
    // Se não for um comando !natal, verificar se é uma mensagem geral de transferência para Natal
    if (!isNatalTransferMessage(message)) {
      return false;
    }

    // Extrair a parte numérica do JID do remetente para exibição/fallback
    const senderPhoneNumber = sender.split('@')[0]; 
    
    logger.info(`Detected potential Natal transfer message from ${senderPhoneNumber}: ${message}`);

    // Encaminhar a mensagem para o ChatGPT para análise e deteção de intenção
    const parsedRide = await askChatGPT(sock, `Parse this message and organize. check the intention.\n\nIf it's affirmative (someone offering a ride), organize the date in a structured format like this example:\n{ "user": "User Name", "direction": "To Airport or From Airport", "datetime": "YYYY-MM-DDTHH:MM:SS", "phoneNumber": "sender's number", "original_msg": "original message" }\n\nIf it's a question (someone asking for a ride), respond with "question intention".\n\nMessage: "${message}"`);
    
    logger.info(`ChatGPT parsed response: ${parsedRide}`);

    // Processar a resposta do ChatGPT
    if (parsedRide.includes('question intention')) {
      // Se o ChatGPT indicar uma pergunta, encontrar e responder com as viagens disponíveis
      const availableRides = findMatchingRides(message);
      if (availableRides.length > 0) {
        const responseMsg = formatAvailableRides(availableRides);
        await sock.sendMessage(groupId, { text: responseMsg });
        logger.info(`Sent available rides to group: ${groupId}`);
      } else {
        // Se não houver viagens correspondentes, solicitar ao utilizador que publique o seu pedido
        await sock.sendMessage(groupId, { 
          text: `No matching rides found for your query. Would you like to post that you're looking for a ride?` 
        });
        logger.info(`No matching rides found for query from ${senderPhoneNumber}`);
      }
      return true;
    } else {
      // Se o ChatGPT indicar uma afirmação (alguém a oferecer uma viagem)
      try {
        // Tentar extrair informações da viagem em JSON da resposta do ChatGPT
        const jsonMatch = parsedRide.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const rideInfo = JSON.parse(jsonMatch[0]);
          
          // Garantir que o phoneNumber é o JID completo do remetente para armazenamento consistente
          if (!rideInfo.phoneNumber || rideInfo.phoneNumber === "sender's number") {
            rideInfo.phoneNumber = sender; 
          }
          
          // --- INÍCIO DA MODIFICAÇÃO ---
          let actualUserName = senderPhoneNumber; // Padrão para a parte numérica do JID

          // Priorizar o pushName da mensagem recebida, se disponível
          if (incomingPushName && incomingPushName.length > 0) {
              actualUserName = incomingPushName;
          } else {
              // Tentar obter o nome de exibição usando sock.getName(sender) como fallback
              // Isso é geralmente mais fiável para obter o nome de exibição (push name, nome verificado ou nome de contacto)
              try {
                const nameFromBaileys = await sock.getName(sender); 
                if (nameFromBaileys) {
                    actualUserName = nameFromBaileys;
                }
              } catch (nameError) {
                  logger.warn(`Could not retrieve contact name for ${sender} using sock.getName: ${nameError.message}`);
                  // Fallback para senderPhoneNumber se a recuperação do nome falhar
              }
          }
          
          // Garantir que o utilizador é preenchido, preferindo o nome de contacto real em vez de "User Name" genérico
          if (!rideInfo.user || rideInfo.user === "User Name") {
            rideInfo.user = actualUserName; 
          }
          // --- FIM DA MODIFICAÇÃO ---
          
          // Adicionar a viagem à lista de direção apropriada
          if (rideInfo.direction.toLowerCase().includes('to airport') || 
              rideInfo.direction.toLowerCase().includes('to natal')) {
            ridesData.toAirport.push({
              ...rideInfo,
              timestamp: Date.now() // Adicionar carimbo de data/hora para limpeza
            });
          } else {
            ridesData.fromAirport.push({
              ...rideInfo,
              timestamp: Date.now() // Adicionar carimbo de data/hora para limpeza
            });
          }
          
          // Guardar os dados de viagens atualizados
          await saveRidesData();
          
          // Confirmar o registo da viagem ao utilizador
          await sock.sendMessage(groupId, { 
            text: `✅ Your ride has been registered!\n\n*Direction:* ${rideInfo.direction}\n*Date/Time:* ${formatDateTime(rideInfo.datetime)}\n\nPeople looking for similar rides will be able to find you.`,
            mentions: [sender] // Mencionar o remetente
          });
          
          logger.info(`Registered new ride from ${rideInfo.user}: ${rideInfo.direction} on ${rideInfo.datetime}`);
          return true;
        } else {
          logger.warn(`Failed to parse JSON from ChatGPT response: ${parsedRide}`);
          return false;
        }
      } catch (parseError) {
        logger.error(`Error parsing ride info from ChatGPT response: ${parseError}`);
        return false;
      }
    }
  } catch (error) {
    logger.error(`Error processing Natal transfer message: ${error}`);
    return false;
  }
}

/**
 * Envia uma mensagem para o contacto WhatsApp ChatGPT designado e aguarda uma resposta.
 * @param {object} sock - O objeto socket Baileys.
 * @param {string} message - A mensagem a enviar para o ChatGPT.
 * @returns {Promise<string>} - O texto de resposta do ChatGPT.
 */
async function askChatGPT(sock, message) {
  return new Promise((resolve, reject) => {
    let responseTimeout;
    
    // Definir o manipulador de mensagens para mensagens recebidas
    function responseHandler(msg) {
      if (msg.type === 'notify') {
        for (const message of msg.messages) {
          // Verificar se a mensagem recebida é do ChatGPT e não foi enviada por nós
          if (message.key.remoteJid === CHATGPT_WHATSAPP && !message.key.fromMe) {
            // Extrair o conteúdo de texto da mensagem
            const responseText = message.message.conversation || 
                                 message.message.extendedTextMessage?.text || '';
            
            if (responseText) {
              // Limpar o tempo limite e remover o ouvinte de eventos assim que uma resposta for recebida
              clearTimeout(responseTimeout);
              sock.ev.off('messages.upsert', responseHandler);
              
              // Resolver a promessa com o texto de resposta
              resolve(responseText);
              return;
            }
          }
        }
      }
    }
    
    // Adicionar o ouvinte de eventos para capturar mensagens
    sock.ev.on('messages.upsert', responseHandler);

    // Enviar a mensagem para o ChatGPT
    sock.sendMessage(CHATGPT_WHATSAPP, { text: message })
      .catch(err => {
        // Se o envio falhar, remover o ouvinte e rejeitar a promessa
        sock.ev.off('messages.upsert', responseHandler);
        reject(err);
      });
    
    // Definir um tempo limite para a resposta (30 segundos)
    responseTimeout = setTimeout(() => {
      sock.ev.off('messages.upsert', responseHandler);
      reject(new Error('Timeout waiting for ChatGPT response'));
    }, 30000);
  });
}

/**
 * Encontra viagens futuras que correspondam a uma dada consulta.
 * Filtra por direção e data (se especificado na consulta).
 * @param {string} query - A consulta de pesquisa do utilizador.
 * @returns {Array<object>} - Um array de objetos de viagem correspondentes.
 */
function findMatchingRides(query) {
  // Sempre limpa as viagens antigas antes de pesquisar
  cleanupOldRides();
  
  const lowerQuery = query.toLowerCase();
  // Determinar a direção da pesquisa com base nas palavras-chave na consulta
  const isSearchingToAirport = lowerQuery.includes('to natal') || 
                               lowerQuery.includes('to airport') || 
                               lowerQuery.includes('leaving pipa');
  
  const isSearchingFromAirport = lowerQuery.includes('from natal') || 
                                 lowerQuery.includes('from airport') || 
                                 lowerQuery.includes('coming to pipa');
  
  const now = new Date();
  
  // Extrair uma data da consulta (simplificado, depende do ChatGPT para análise complexa)
  let searchDate = extractDateFromQuery(query);
  
  let matches = [];
  
  // Filtrar viagens com base na direção e data determinadas
  if (isSearchingToAirport) {
    matches = ridesData.toAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      // Corresponder viagens no mesmo dia se uma data de pesquisa for fornecida e garantir que estão no futuro
      if (searchDate) {
        return isSameDay(rideDate, searchDate) && rideDate > now;
      }
      // Caso contrário, retornar todas as viagens futuras nesta direção
      return rideDate > now;
    });
  } else if (isSearchingFromAirport) {
    matches = ridesData.fromAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      if (searchDate) {
        return isSameDay(rideDate, searchDate) && rideDate > now;
      }
      return rideDate > now;
    });
  } else {
    // Se a direção for incerta, pesquisar em ambas as direções
    const toMatches = ridesData.toAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      return searchDate ? isSameDay(rideDate, searchDate) && rideDate > now : rideDate > now;
    });
    
    const fromMatches = ridesData.fromAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      return searchDate ? isSameDay(rideDate, searchDate) && rideDate > now : rideDate > now;
    });
    
    matches = [...toMatches, ...fromMatches];
  }
  
  return matches;
}
/**
 * Formata uma lista de viagens disponíveis numa string de mensagem legível por humanos.
 * @param {Array<object>} rides - Um array de objetos de viagem a formatar.
 * @returns {string} - A mensagem formatada.
 */
function formatAvailableRides(rides) {
  if (rides.length === 0) {
    return "No matching rides found.";
  }
  
  // Agrupar viagens por direção para melhor apresentação
  const toNatal = rides.filter(r => r.direction.toLowerCase().includes('to airport') || r.direction.toLowerCase().includes('to natal'));
  const fromNatal = rides.filter(r => !toNatal.includes(r)); // Viagens que não vão para Natal são assumidas como vindas de Natal
  
  let message = `*Found ${rides.length} matching ride${rides.length > 1 ? 's' : ''}:*\n\n`;
  
  if (toNatal.length > 0) {
    message += `*🏝 From Pipa to Natal:*\n`;
    toNatal.forEach(ride => {
      // Usar displayUserName para exibição robusta do nome de utilizador
      message += `• ${formatDateTime(ride.datetime)} - ${displayUserName(ride)} (${formatPhoneNumber(ride.phoneNumber)})\n`;
    });
    message += '\n';
  }
  
  if (fromNatal.length > 0) {
    message += `*🌆 From Natal to Pipa:*\n`;
    fromNatal.forEach(ride => {
      // Usar displayUserName para exibição robusta do nome de utilizador
      message += `• ${formatDateTime(ride.datetime)} - ${displayUserName(ride)} (${formatPhoneNumber(ride.phoneNumber)})\n`;
    });
  }
  
  message += `\nTo offer a ride, simply share your travel plans in the group.`;
  
  return message;
}

/**
 * Formata uma string de data num formato legível (por exemplo, "Monday, May 20 at 15:00").
 * @param {string} dateStr - A string de data a formatar (por exemplo, "YYYY-MM-DDTHH:MM:SS").
 * @returns {string} - A data e hora formatadas.
 */
function formatDateTime(dateStr) {
  try {
    const date = new Date(dateStr);
    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    const dayName = days[date.getDay()];
    
    // Usar toLocaleString para formatação flexível de data/hora
    return `${dayName}, ${date.toLocaleString('en-US', { 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      hour12: false // Forçar formato de 24 horas
    })}`;
  } catch (error) {
    logger.error(`Error formatting date ${dateStr}: ${error}`);
    return dateStr; // Retornar a string original se a análise falhar
  }
}

/**
 * Formata um número de telefone para exibição, ocultando parte dele por privacidade.
 * Lida com números simples e JIDs do WhatsApp.
 * @param {string} phoneNumber - O número de telefone ou JID a formatar.
 * @returns {string} - O número de telefone formatado.
 */
function formatPhoneNumber(phoneNumber) {
  // Extrair apenas a parte numérica se for um JID (por exemplo, '1234567890@s.whatsapp.net' -> '1234567890')
  const numberOnly = phoneNumber.includes('@') ? phoneNumber.split('@')[0] : phoneNumber;

  // Se a parte extraída consistir apenas em dígitos, formatá-la
  if (/^\d+$/.test(numberOnly)) {
    // Mostrar os primeiros 4 dígitos, depois '****', depois os últimos 2 dígitos
    if (numberOnly.length >= 6) { // Garantir que há dígitos suficientes para este formato
      return numberOnly.substring(0, 4) + '****' + numberOnly.substring(numberOnly.length - 2);
    }
    return numberOnly; // Se for muito curto, apenas retornar o número
  }
  return phoneNumber; // Se não for uma string de dígitos simples, retornar o original (por exemplo, se já estiver mascarado)
}

/**
 * Determina o melhor nome de utilizador a exibir para uma viagem.
 * Prioriza o campo 'user' se disponível e não genérico, caso contrário, usa o número de telefone.
 * @param {object} ride - O objeto da viagem.
 * @returns {string} - O nome de utilizador a exibir.
 */
function displayUserName(ride) {
  // Preferir o campo 'user' se for um nome específico e não o "User Name" genérico
  if (ride.user && ride.user !== "User Name" && ride.user.length > 0) {
    return ride.user;
  }
  // Fallback para a parte numérica do número de telefone (JID)
  if (ride.phoneNumber) {
    return ride.phoneNumber.split('@')[0];
  }
  return "Unknown User"; // Último recurso se não houver informações de utilizador ou número de telefone
}

/**
 * Extrai uma data de uma string de consulta.
 * Esta é uma função simplificada e idealmente usaria uma biblioteca de análise de data mais robusta
 * ou dependeria fortemente das capacidades de análise do ChatGPT.
 * @param {string} query - A string de consulta para extrair uma data.
 * @returns {Date|null} - Um objeto Date se um padrão de data for encontrado, caso contrário, nulo.
 */
function extractDateFromQuery(query) {
  // Esta é uma extração de data muito simplificada.
  // Num ambiente de produção, considere usar uma biblioteca como 'chrono-node'
  // ou depender do ChatGPT para retornar uma data precisa na sua saída JSON.
  
  const datePatterns = [
    /(\d{1,2})\/(\d{1,2})/, // Padrão MM/DD
    /(?:jan(?:uary)?|feb(?:ruary)?|mar(?:ch)?|apr(?:il)?|may|jun(?:e)?|jul(?:y)?|aug(?:ust)?|sep(?:tember)?|oct(?:ober)?|nov(?:ember)?|dec(?:ember)?)\s+(\d{1,2})/i, // Padrões de nome de mês
    /\b(?:today|tomorrow|tonight)\b/i // Palavras-chave para datas relativas
  ];
  
  for (const pattern of datePatterns) {
    if (pattern.test(query)) {
      // Para esta demonstração, não estamos realmente a analisar a data numa data futura específica
      // com base na consulta. Estamos apenas a retornar a data atual como um espaço reservado
      // para indicar que uma data foi "encontrada". Espera-se que o ChatGPT forneça a data/hora real.
      return new Date();
    }
  }
  
  return null;
}

/**
 * Verifica se dois objetos Date caem no mesmo dia do calendário.
 * @param {Date} date1 - O primeiro objeto Date.
 * @param {Date} date2 - O segundo objeto Date.
 * @returns {boolean} - Verdadeiro se estiverem no mesmo dia, falso caso contrário.
 */
function isSameDay(date1, date2) {
  return date1.getFullYear() === date2.getFullYear() &&
         date1.getMonth() === date2.getMonth() &&
         date1.getDate() === date2.getDate();
}

/**
 * Limpa viagens antigas dos dados. Viagens com mais de 24 horas após a hora agendada são removidas.
 * Esta função é executada no máximo uma vez por hora para evitar operações excessivas no ficheiro.
 */
function cleanupOldRides() {
  const now = Date.now();
  
  // Executar a limpeza apenas se tiver passado pelo menos uma hora desde a última limpeza
  if (now - ridesData.lastCleanup < 60 * 60 * 1000) { // 60 minutos * 60 segundos * 1000 milissegundos
    return;
  }
  
  logger.info('Running cleanup of old rides');
  
  let removedCount = 0;
  
  // Filtrar viagens com mais de 24 horas após a sua data/hora agendada
  ridesData.toAirport = ridesData.toAirport.filter(ride => {
    const rideTime = new Date(ride.datetime).getTime();
    const keepRide = now < rideTime + (24 * 60 * 60 * 1000); // Manter se a hora atual for anterior à hora da viagem + 24 horas
    if (!keepRide) removedCount++;
    return keepRide;
  });
  
  ridesData.fromAirport = ridesData.fromAirport.filter(ride => {
    const rideTime = new Date(ride.datetime).getTime();
    const keepRide = now < rideTime + (24 * 60 * 60 * 1000); 
    if (!keepRide) removedCount++;
    return keepRide;
  });
  
  // Atualizar o carimbo de data/hora da última limpeza
  ridesData.lastCleanup = now;
  
  // Se alguma viagem foi removida, guardar os dados atualizados no ficheiro
  if (removedCount > 0) {
    logger.info(`Removed ${removedCount} expired rides`);
    saveRidesData();
  }
}

/**
 * Lida com o comando `!natal`, exibindo todas as viagens futuras em ambas as direções.
 * @param {object} sock - O objeto socket Baileys para enviar mensagens.
 * @param {string} groupId - O JID do grupo para onde enviar a mensagem.
 * @returns {Promise<boolean>} - Verdadeiro se a mensagem foi enviada com sucesso, falso caso contrário.
 */
async function handleNatalCommand(sock, groupId) {
  try {
    // Garantir que as viagens antigas são limpas antes de exibir
    cleanupOldRides();
    
    const now = new Date();
    
    // Filtrar viagens que ainda estão no futuro
    const toNatalRides = ridesData.toAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      return rideDate > now;
    });
    
    const fromNatalRides = ridesData.fromAirport.filter(ride => {
      const rideDate = new Date(ride.datetime);
      return rideDate > now;
    });
    
    // Ordenar viagens por data e hora em ordem crescente
    const sortByDateTime = (a, b) => {
      return new Date(a.datetime) - new Date(b.datetime);
    };
    
    toNatalRides.sort(sortByDateTime);
    fromNatalRides.sort(sortByDateTime);
    
    // Construir a mensagem a exibir
    let message = "*🚕 Upcoming Natal Rides*\n\n";
    
    // Adicionar viagens "De Pipa para Natal"
    if (toNatalRides.length > 0) {
      message += "*🏝 From Pipa to Natal:*\n";
      toNatalRides.forEach(ride => {
        // Usar displayUserName e formatPhoneNumber para exibição adequada
        message += `• ${formatDateTime(ride.datetime)} - ${displayUserName(ride)} (${formatPhoneNumber(ride.phoneNumber)})\n`;
      });
      message += "\n";
    } else {
      message += "*🏝 From Pipa to Natal:* No upcoming rides\n\n";
    }
    
    // Adicionar viagens "De Natal para Pipa"
    if (fromNatalRides.length > 0) {
      message += "*🌆 From Natal to Pipa:*\n";
      fromNatalRides.forEach(ride => {
        // Usar displayUserName e formatPhoneNumber para exibição adequada
        message += `• ${formatDateTime(ride.datetime)} - ${displayUserName(ride)} (${formatPhoneNumber(ride.phoneNumber)})\n`;
      });
    } else {
      message += "*🌆 From Natal to Pipa:* No upcoming rides";
    }
    
    message += "\n\nTo offer a ride, simply share your travel plans in the group.";
    message += "\nTo search for rides, just ask something like 'Anyone going to Natal tomorrow?'";
    
    // Enviar a mensagem compilada para o grupo
    await sock.sendMessage(groupId, { text: message });
    logger.info(`Sent all upcoming rides to group: ${groupId}`);
    
    return true;
  } catch (error) {
    logger.error(`Error handling !natal command: ${error}`);
    return false;
  }
}

/**
 * Inicializa o módulo de transferência para Natal carregando os dados de viagens existentes.
 */
async function initNatalTransfer() {
  await loadRidesData();
  logger.info('Natal transfer module initialized');
}

// Exportar funções para uso em outros módulos
module.exports = {
  initNatalTransfer,
  processNatalTransferMessage,
  isNatalTransferMessage,
  handleNatalCommand // Exportar handleNatalCommand também se for chamado externamente
};

